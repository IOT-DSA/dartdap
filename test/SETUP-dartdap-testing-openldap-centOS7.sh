#!/bin/sh
#
# This script sets up OpenLDAP on a fresh installation of CentOS 7.
#
# https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/ch-Directory_Servers.html#s1-OpenLDAP
# https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS

PROG=`basename "$0"`
PROGDIR=`dirname "$0"`

trap "echo $PROG: error: aborted; exit 3" ERR

#----------------------------------------------------------------
# Constants

BRANCH_DN="dc=example,dc=com"

ADMIN_PASSWORD=s3cr3t
MANAGER_PASSWORD=p@ssw0rd

ADMIN_PASSWORD_FILE=/etc/openldap/password-admin.txt
MANAGER_PASSWORD_FILE=/etc/openldap/password-manager.txt

#----------------------------------------------------------------
# Process arguments

if [ $# -eq 1 -a "$1" = '--tls-none' ]; then
    TLS_SETUP=none
elif [ $# -eq 0  -o  $# -eq 1 -a "$1" = '--tls-default' ]; then
    TLS_SETUP=default
    TLS_DOMAIN=localhost
elif [ $# -ge 4 -a "$1" = '--tls' ]; then
    TLS_SETUP=provided; shift
    TLS_DOMAIN="$1"; shift
    TLS_PVT="$1"; shift
    TLS_CRT="$1"; shift
    if [ ! -f "$TLS_PVT" ]; then
	echo "$PROG: error: file not found: $TLS_PVT" >&2
	exit 1
    fi
    if [ ! -f "$TLS_CRT" ]; then
	echo "$PROG: error: file not found: $TLS_CRT" >&2
	exit 1
    fi
else
    echo "Usage: $PROG [options]"
    echo "Options:"
    echo "  --tls-default"
    echo "      - use server certificate generated by install (default)"
    echo "  --tls domainname server.pvt server.crt {issuer.crt...}"
    echo "      - setup with explicitly provided PKI credentials"
    echo "  --tls-none"
    echo "      - do not setup LDAPS, only setup LDAP"
    exit 0
fi

#----------------------------------------------------------------
# Check permissions

if [ `id -u` -ne 0 ]; then
    echo "$PROG: error: root privileges required" >&2
    exit 1
fi

#----------------------------------------------------------------
# Install OpenLDAP from packages

PACKAGES="openldap openldap-servers openldap-clients"
if ! rpm -q ${PACKAGES}; then
    yum install -y ${PACKAGES}
fi

#----------------------------------------------------------------
# Configure OpenLDAP

# Configure backend storage (so warnings aren't generated by slapd)

if [ ! -f /var/lib/ldap/DB_CONFIG ]; then
    # Create a DB_CONFIG file so the HDB storage mechanism performs better

    cp /usr/share/openldap-servers/DB_CONFIG.example /var/lib/ldap/DB_CONFIG
    chown ldap. /var/lib/ldap/DB_CONFIG
fi

#----------------------------------------------------------------
# Start the slapd service

systemctl enable slapd.service

systemctl start slapd.service

#----------------------------------------------------------------
# Configure the administration password

# Store the password in a file, so it can be securely passed to slappasswd

if [ ! -e "$ADMIN_PASSWORD_FILE" ]; then
    touch "$ADMIN_PASSWORD_FILE"
    chmod 600 "$ADMIN_PASSWORD_FILE"
    /bin/echo -n "$ADMIN_PASSWORD" > "$ADMIN_PASSWORD_FILE"
    chmod 400 "$ADMIN_PASSWORD_FILE"
    echo "$PROG: created password file: $ADMIN_PASSWORD_FILE"
else
    echo "$PROG: using existing password file: $ADMIN_PASSWORD_FILE"
fi

# Hash the password

PASSWORD_HASH=`slappasswd -n -T "$ADMIN_PASSWORD_FILE"`

# Set the admin password in OpenLDAP

echo "$PROG: setting OpenLDAP admin password"

ldapadd -Y EXTERNAL -Q -H ldapi:/// <<EOF
dn: olcDatabase={0}config,cn=config
changetype: modify
replace: olcRootPW
olcRootPW: ${PASSWORD_HASH}
EOF

#----------------------------------------------------------------
# Import some standard schemas

if ! ldapsearch -Y EXTERNAL -H ldapi:/// -b cn={1}cosine,cn=schema,cn=config * -LLL >/dev/null 2>&1; then
    echo "$PROG: importing standard schemas"

    ldapadd -Y EXTERNAL -Q -H ldapi:/// -f /etc/openldap/schema/cosine.ldif
    ldapadd -Y EXTERNAL -Q -H ldapi:/// -f /etc/openldap/schema/nis.ldif 
    ldapadd -Y EXTERNAL -Q -H ldapi:/// -f /etc/openldap/schema/inetorgperson.ldif 
fi

#----------------------------------------------------------------
# Configure the directory tree

# Configure the manager password

# Store the password in a file, so it can be securely passed to slappasswd

if [ ! -e "$MANAGER_PASSWORD_FILE" ]; then
    touch "$MANAGER_PASSWORD_FILE"
    chmod 600 "$MANAGER_PASSWORD_FILE"
    /bin/echo -n "$MANAGER_PASSWORD" > "$MANAGER_PASSWORD_FILE"
    chmod 400 "$MANAGER_PASSWORD_FILE"
    echo "$PROG: creating password file: $MANAGER_PASSWORD_FILE"
else
    echo "$PROG: using existing password file: $MANAGER_PASSWORD_FILE"
fi

# Hash the password

PASSWORD_HASH=`slappasswd -n -T "$MANAGER_PASSWORD_FILE"`

# Create the branch

echo "$PROG: creating branch ${BRANCH_DN}"

ldapmodify -Y EXTERNAL -Q -H ldapi:/// <<EOF
dn: olcDatabase={1}monitor,cn=config
changetype: modify
replace: olcAccess
olcAccess:{0}
  to
    * by dn.base="gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth"
    read by dn.base="cn=Manager,${BRANCH_DN}"
    read by * none

dn: olcDatabase={2}hdb,cn=config
changetype: modify
replace: olcSuffix
olcSuffix: ${BRANCH_DN}

dn: olcDatabase={2}hdb,cn=config
changetype: modify
replace: olcRootDN
olcRootDN: cn=Manager,${BRANCH_DN}

dn: olcDatabase={2}hdb,cn=config
changetype: modify
#add: olcRootPW
replace: olcRootPW
olcRootPW: ${PASSWORD_HASH}

dn: olcDatabase={2}hdb,cn=config
changetype: modify
#add: olcAccess
replace: olcAccess
olcAccess:{0}
  to
    attrs=userPassword,shadowLastChange by dn="cn=Manager,${BRANCH_DN}"
    write by anonymous
    auth by self
    write by * none
olcAccess:{1}
 to
   dn.base="" by * read
olcAccess:{2}
  to
    * by dn="cn=Manager,${BRANCH_DN}"
    write by * read
EOF

#----------------------------------------------------------------
# Populate the branch with entries

echo "$PROG: populating branch ${BRANCH_DN}"

if ldapdelete -x -D cn=Manager,${BRANCH_DN} -y ${MANAGER_PASSWORD_FILE} \
    -r ${BRANCH_DN} >/dev/null 2>&1; then
    echo "$PROG: deleted existing entries from ${BRANCH_DN}"
fi

ldapadd -x -D cn=Manager,${BRANCH_DN} -y ${MANAGER_PASSWORD_FILE} <<EOF
dn: ${BRANCH_DN}
o: Test server
objectClass: top
objectClass: dcObject
objectclass: organization

#dn: cn=Manager,${BRANCH_DN}
#description: Directory Manager
#objectClass: organizationalRole
#
#dn: ou=Users,${BRANCH_DN}
#objectClass: organizationalUnit
#
#dn: ou=Groups,${BRANCH_DN}
#objectClass: organizationalUnit
EOF

#----------------------------------------------------------------
# Configure TLS

case "$TLS_SETUP" in
    none)
	;;

    default)
	# Use generated self-signed "OpenLDAP Server" certificate
	TLS_NAME="OpenLDAP Server"
	;;

    provided)
	# Create PKCS#12

	PKCS12_FILE="/etc/openldap/${TLS_DOMAIN}.p12"
	TLS_NAME="${TLS_DOMAIN}"

	touch "${PKCS12_FILE}"
	chmod 600 "${PKCS12_FILE}"
	openssl pkcs12 -export \
	    -inkey "${TLS_PVT}" -in "$TLS_CRT" \
	    -out "${PKCS12_FILE}" -passout pass:"" -name "${TLS_NAME}"

	# Remove (just in case it is already in the NSS)
	# Wrapped in "if" to ignore error if it fails

	if certutil -d /etc/openldap/certs -D -n "${TLS_NAME}" >/dev/null 2>&1;
	then : ; fi

	# Remove issuer certificates

	for ISSUER_CRT in $*; do
	    NAME=`basename "${ISSUER_CRT}" .crt`
	    if certutil -d /etc/openldap/certs -D -n "$NAME" >/dev/null 2>&1;
	    then : ; fi
	done

	# Import it into the NSS

	pk12util -d /etc/openldap/certs -k /etc/openldap/certs/password \
	    -i "${PKCS12_FILE}" -W ""

	# Sometimes pk12util claims to have imported succesfully, but doesn't.
	# Check for this situation.

	if ! certutil -d /etc/openldap/certs -L | grep "^${TLS_NAME}" >/dev/null; then
	    echo "$PROG: pk12util failed to import the PKCS#12 file" >&2
	    echo "$PROG: Remove some certs from the NSS database and try again." >&2
	    exit 1
	fi

	rm "${PKCS12_FILE}"

	# Change the trust attributes on it
	# TODO: nothing changes, trust attributes remain "u,u,u". Bug in certutil?

	certutil -d /etc/openldap/certs -M -n "${TLS_NAME}" -t "u,,"

	if [ $# -gt 0 ]; then
   	    # Add issuer certificates
	    for ISSUER_CRT in $*; do
		NAME=`basename "${ISSUER_CRT}" .crt`
		certutil -d /etc/openldap/certs -A -i "${ISSUER_CRT}" -n "$NAME" -t "c,,"
	    done

	else
	    # No issuer certificates (assume it is self signed): trust it as a CA
	    certutil -d /etc/openldap/certs -M -n "$TLS_NAME" -t "Cu,,"
	fi
	;;

    *)
	echo "$PROG: internal error: unexpected TLS_SETUP value: $TLS_SETUP" >&2
	exit 3
	;;
esac

if [ "$TLS_SETUP" != 'none' ]; then

    echo "$PROG: setting OpenLDAP TLS certificates"

    ldapmodify -Y EXTERNAL -Q -H ldapi:/// <<EOF
dn: cn=config
changetype: modify
replace: olcTLSCertificateFile
olcTLSCertificateFile: "${TLS_NAME}"
EOF

    # Edit /etc/sysconfig/slapd to add "ldaps:///" to SLAPD_URLS
    # so slapd will listen on port 636 for LDAP over TLS (as well
    # as supporting StartTLS on port 386).

    sed --in-place=.bak \
	-e 's|^SLAPD_URLS=.*|SLAPD_URLS="ldapi:/// ldap:/// ldaps:///"|' \
	/etc/sysconfig/slapd
else
    # Edit /etc/sysconfig/slapd to remove "ldaps:///" from SLAPD_URLS

    sed --in-place=.bak \
	-e 's|^SLAPD_URLS=.*|SLAPD_URLS="ldapi:/// ldap:///"|' \
	/etc/sysconfig/slapd

    # Warning: StartTLS is still enabled (fix?)
fi

systemctl restart slapd.service

echo "$PROG: LDAP directory installed and configured"

#----------------------------------------------------------------
# Test searches

echo
echo "$PROG: performing some test LDAP searches"
echo

echo "$PROG: ldap://localhost (no TLS)"
ldapsearch \
    -H ldap://localhost \
    -D cn=Manager,${BRANCH_DN} -x -y ${MANAGER_PASSWORD_FILE} \
    -LLL \
    -b ${BRANCH_DN} '(dc=*)' 

if [ "$TLS_SETUP" != 'none' ]; then

    echo "$PROG: ldap://${TLS_DOMAIN} + optional StartTLS"
    ldapsearch -Z \
	-H ldap://"${TLS_DOMAIN}" \
	-D cn=Manager,${BRANCH_DN} -x -y ${MANAGER_PASSWORD_FILE} \
	-LLL \
	-b ${BRANCH_DN} '(dc=*)' 

    echo "$PROG: ldap://${TLS_DOMAIN} + mandatory StartTLS"
    ldapsearch -ZZ \
	-H ldap://"${TLS_DOMAIN}" \
	-D cn=Manager,${BRANCH_DN} -x -y ${MANAGER_PASSWORD_FILE} \
	-LLL \
	-b ${BRANCH_DN} '(dc=*)' 

    echo "$PROG: ldaps://${TLS_DOMAIN} (LDAP over TLS)"
    ldapsearch \
	-H ldaps://"${TLS_DOMAIN}" \
	-D cn=Manager,${BRANCH_DN} -x -y ${MANAGER_PASSWORD_FILE} \
	-LLL \
	-b ${BRANCH_DN} '(dc=*)' 
fi

echo
echo "$PROG: success"

exit 0

#EOF
